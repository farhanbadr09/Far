# -*- coding: utf-8 -*-
"""
Bottleneck  Data Processing Steps before Applying Machine Learning on datasets, Select features and tranform in format(ecoding) that machine learning model understand. 
--------------------------------------------------
Briefs on the below code

This code is an example of how to preprocess a dataset using the `pandas` and `scikit-learn` libraries in Python. The code starts by importing the necessary libraries, including `pandas`, `LabelEncoder`, `StandardScaler`, `OneHotEncoder`, `ColumnTransformer`, `Pipeline`, `SimpleImputer`, `train_test_split`, `RandomForestClassifier`, and `accuracy_score`.

The code then loads a dataset from a CSV file using the `pd.read_csv()` function and prints the data. The next step is to encode the categorical columns 'sex' and 'smoker' using the `LabelEncoder` class. This class is used to transform non-numerical labels into numerical labels. The code then one-hot encodes the categorical columns 'day' and 'time' using the `pd.get_dummies()` function.

The code then prompts the user to enter the name of the target column and checks if it exists in the DataFrame. If it does, it prints a message indicating that the target column has been selected, otherwise it prints an error message.

This code is an example of how to preprocess a dataset for machine learning by encoding categorical variables and checking for missing values. It can be extended to include additional preprocessing steps such as imputing missing values, scaling numerical features, and splitting the data into training and test sets. Is there anything else you would like me to explain? ðŸ˜Š

---------------------------------------------------

Question: Why needs to conver 'sex' column from non-numerical to numerical? such as code transforming sex into numerical values?
The reason for converting the 'sex' column from non-numerical to numerical values is that many machine learning algorithms can only handle numerical data. Categorical data, such as the values in the 'sex' column, need to be converted into numerical form before they can be used as input for these algorithms.

One way to do this is by using label encoding, which assigns a unique numerical value to each category. In this code, the `LabelEncoder` class from the `scikit-learn` library is used to perform this transformation. The `fit_transform()` method of the `LabelEncoder` object is called on the 'sex' column of the data, which assigns a numerical value to each unique category in the column and returns a new column with these numerical values.

This transformation allows the 'sex' column to be used as input for machine learning algorithms that require numerical data. However, it's important to note that label encoding can introduce an arbitrary ordering of the categories, which may not be appropriate for all algorithms. In such cases, other encoding methods such as one-hot encoding can be used. ðŸ˜Š
------------------------------------------------------
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Emh98patba5-2OrVhS6CtO5p6j4eeBQm
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Load the dataset (replace 'data.csv' with your dataset)
data = pd.read_csv('/content/drive/MyDrive/tips.csv')
print(data)

# Encode categorical columns 'sex' and 'smoker' using LabelEncoder
label_encoder = LabelEncoder()
data['sex'] = label_encoder.fit_transform(data['sex'])
print (data['sex'])
data['smoker'] = label_encoder.fit_transform(data['smoker'])
print (data['smoker'])
# One-hot encode categorical columns 'day' and 'time'
data = pd.get_dummies(data, columns=['day', 'time'])

target_column = input("Enter the name of the target column: ")
# Check if the entered column exists in the DataFrame
if target_column in df.columns:
    print(f"Target column '{target_column}' selected.")
    # Now you can use 'target_column' for further processing
else:
    print(f"Column '{target_column}' does not exist in the DataFrame.")

